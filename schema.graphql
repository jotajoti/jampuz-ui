schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Admin {
  email: String!
  id: ID!
  name: String!
}

type CountryStat {
  """ A lowercase [ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code
  """
  country: String!
  id: ID!
  uniqueCount: Int!
}

input CreateAdmin {
  email: String!
  name: String!
  password: String!
}

input CreateEventInput {
  active: Boolean = false
  code: String!
  locationId: ID!
  year: Int!
}

input CreateLocationInput {
  name: String!
}

input CreateParticipantInput {
  eventId: ID!
  name: String!
}

"""An RFC-3339 compliant Full Date Scalar"""
scalar Date

type Event {
  active: Boolean!
  code: JidCode!
  id: ID!
  """ Returns true if event is latest for the location"""
  isLatest: Boolean!
  jidCodeStats: JidCodeStats!
  location: Location!
  """ Return next year's event"""
  next: Event
  participants: [Participant!]!
  """ Return previous year's event"""
  previous: Event
  year: Int!
}

type FoundJidCode {
  code: JidCode!
  id: ID!
  participant: Participant!
}

type JidCode {
  """ A lowercase [ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code
  """
  country: String!
  region: Region!
  value: String!
}

type JidCodeStats {
  count: Int!
  countryStats: [CountryStat!]!
  id: ID!
  uniqueCount: Int!
  uniqueCountries: [String!]!
  uniqueCountryCount: Int!
  uniqueRegionCount: Int!
  uniqueRegions: [Region!]!
}

type Location {
  events: [Event!]!
  id: ID!
  latestEvent: Event
  name: String!
  owners: [Admin!]
}

type Mutation {
  addOwner(adminId: ID!, locationId: ID!): Location
  authenticateAdmin(email: String!, password: String!): String
  authenticateParticipant(eventId: ID!, name: String!, pinCode: String!): String
  createAdmin(input: CreateAdmin!): Admin
  createEvent(input: CreateEventInput!): Event
  """ Create a new location, with the authenticated admin added as the first owner
  """
  createLocation(input: CreateLocationInput!): Location
  createParticipant(input: CreateParticipantInput!): Participant
  ping: String
  """ Participant is taken from authentication"""
  registerFoundJidCode(input: RegisterFoundJidCode!): FoundJidCode
  removeOwner(adminId: ID!, locationId: ID!): Location
  updateEvent(input: UpdateEventInput!): Event
}

type Participant {
  """ If not null, means this participant is linked to the Admin user so the admin also can act as participant.
  """
  admin: Admin
  event: Event!
  foundJidCodes: [FoundJidCode!]
  id: ID!
  jidCodeStats: JidCodeStats!
  name: String!
  """ Pin code is only set if authenticated user is participant itself or an owner on the location
  """
  pinCode: String
}

type Query {
  """ Return null if not authenticated or if authentication is not an admin"""
  authenticatedAdmin: Admin
  """
   Return null if not authenticated or if authentication is not a participant
   If eventJidCode is provided it will only return participant if the authenticated
   participant is associated with the event
  """
  authenticatedParticipant(eventJidCode: String, year: Int): Participant
  """
   If no year is provided the latest event is taken
   Can be loaded without authentication
  """
  event(code: String!, year: Int): Event
  """
   Load specific event by ID.
   Requires admin authentication
  """
  eventById(eventId: ID!): Event
  """ Only returns location if owned by authenticated admin"""
  location(locationId: ID!): Location
  """ Only returns locations owned by authenticated admin"""
  locations: [Location!]
  serverVersion: String!
}

enum Region {
  AFRICA
  ARAB
  ASIA_PACIFIC
  EUROASIA
  EUROPE
  INTERAMERICA
  SPECIAL
}

input RegisterFoundJidCode {
  code: String!
  eventId: ID!
}

type Subscription {
  dummy: String
  eventUpdated(eventId: ID!): ID!
}

input UpdateEventInput {
  active: Boolean
  code: String
  id: ID!
  year: Int
}